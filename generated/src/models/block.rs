/*
 * Universal REST API
 *
 * Universal API provides a RESTful and uniform way to access blockchain resources, with a rich and reusable model across multiple protocols/cryptocurrencies.  [Documentation](https://app.blockdaemon.com/docs/ubiquity)  ### Currently supported protocols:  * algorand   * mainnet * bitcoin   * mainnet/testnet * bitcoincash   * mainnet/testnet * dogecoin   * mainnet/testnet * ethereum   * mainnet/goerli * litecoin   * mainnet/testnet * near   * mainnet/testnet * oasis   * mainnet * optimism   * mainnet * polkadot   * mainnet/westend * polygon   * mainnet * solana   * mainnet/testnet * stellar   * mainnet/testnet * tezos   * mainnet * xrp   * mainnet  ##### Pagination Certain resources contain a lot of data, more than what's practical to return for a single request. With the help of pagination, the data is split across multiple responses. Each response returns a subset of the items requested, and a continuation token.  To get the next batch of items, copy the returned continuation token to the continuation query parameter and repeat the request with the new URL. In case no continuation token is returned, there is no more data available. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@blockdaemon.com
 * Generated by: https://openapi-generator.tech
 */

/// Block : Block object.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Block {
    /// Block number
    #[serde(rename = "number", skip_serializing_if = "Option::is_none")]
    pub number: Option<i64>,
    /// Block hash
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Parent block hash
    #[serde(rename = "parent_id", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<String>,
    /// Block date in unix timestamp format
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<i64>,
    /// Amount of transaction in the block
    #[serde(rename = "num_txs", skip_serializing_if = "Option::is_none")]
    pub num_txs: Option<i32>,
    /// List of normalized transactions presented in the block (not filtered or unknown model)
    #[serde(rename = "txs", skip_serializing_if = "Option::is_none")]
    pub txs: Option<Vec<crate::models::Tx>>,
}

impl Block {
    /// Block object.
    pub fn new() -> Block {
        Block {
            number: None,
            id: None,
            parent_id: None,
            date: None,
            num_txs: None,
            txs: None,
        }
    }
}


