/*
 * Universal REST API
 *
 * Universal API provides a RESTful and uniform way to access blockchain resources, with a rich and reusable model across multiple protocols/cryptocurrencies.  [Documentation](https://app.blockdaemon.com/docs/ubiquity)  ### Currently supported protocols:  * algorand   * mainnet * bitcoin   * mainnet/testnet * bitcoincash   * mainnet/testnet * dogecoin   * mainnet/testnet * ethereum   * mainnet/goerli * litecoin   * mainnet/testnet * near   * mainnet/testnet * oasis   * mainnet * optimism   * mainnet * polkadot   * mainnet/westend * polygon   * mainnet/amoy * solana   * mainnet/testnet * stellar   * mainnet/testnet * tezos   * mainnet * xrp   * mainnet  ##### Pagination Certain resources contain a lot of data, more than what's practical to return for a single request. With the help of pagination, the data is split across multiple responses. Each response returns a subset of the items requested, and a continuation token.  To get the next batch of items, copy the returned continuation token to the continuation query parameter and repeat the request with the new URL. In case no continuation token is returned, there is no more data available. 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@blockdaemon.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TxOutputResponse {
    /// the output index within a given transaction
    #[serde(rename = "index", skip_serializing_if = "Option::is_none")]
    pub index: Option<i32>,
    /// the transaction identifier
    #[serde(rename = "tx_id", skip_serializing_if = "Option::is_none")]
    pub tx_id: Option<String>,
    /// the transaction creation unix timestamp
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<i32>,
    /// the hash identifier of the block which the transaction was mined
    #[serde(rename = "block_id", skip_serializing_if = "Option::is_none")]
    pub block_id: Option<String>,
    /// the number of the block which the transaction was mined
    #[serde(rename = "block_number", skip_serializing_if = "Option::is_none")]
    pub block_number: Option<i32>,
    /// the number of confirmations the transaction took in order to be mined
    #[serde(rename = "confirmations", skip_serializing_if = "Option::is_none")]
    pub confirmations: Option<i32>,
    #[serde(rename = "meta", skip_serializing_if = "Option::is_none")]
    pub meta: Option<serde_json::Value>,
}

impl TxOutputResponse {
    pub fn new() -> TxOutputResponse {
        TxOutputResponse {
            index: None,
            tx_id: None,
            date: None,
            block_id: None,
            block_number: None,
            confirmations: None,
            meta: None,
        }
    }
}


